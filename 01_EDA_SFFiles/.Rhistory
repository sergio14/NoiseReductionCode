par(mfrow=c(2,2))
clipMode(sff) <- "raw"
hist(width(sff),breaks=500,col="grey",xlab="Read Length",
xlim= c(50,800), main= "RAW read length")
lenStat_raw<-rbind(lenStat_raw, c(gsub("454Reads.MID_","",gsub(".sff","",i)), summary(width(sff)) ) )
count_raw[i,1]<-length(sff)
len_raw[[i]]<-width(sff)
## Base by position plots:
ac <- alphabetByCycle(sread(sff),alphabet=c("A","C","T","G","N"))
ac.reads <- apply(ac,2,sum)
acf <- sweep(ac,MARGIN=2,FUN="/",STATS=apply(ac,2,sum))
tacf<-t(acf); colnames(tacf)<-paste(gsub("454Reads.MID_","",gsub(".sff","",i)),"_",  c("A","C","T","G","N"),sep="")
nucFreq_raw<-cbindX(nucFreq_raw,tacf)
matplot(cbind(t(acf),ac.reads/ac.reads[1]),col=c("green","blue","black","red","darkgrey","purple"),
type="l",lty=1,xlab="Base Position",ylab="Base Frequency",
main="Base by position", xlim=c(0,1500))
cols <- c("green","blue","black","red","darkgrey","purple")
leg <- c("A","C","T","G","N","%reads")
legend("topright", col=cols, legend=leg, pch=18, cex=.8)
### FILTER QUALITY
clipMode(sff) <- "full"
hist(width(sff),breaks=500,col="grey",xlab="Read Length",
xlim= c(50,800),main="CLIPPED read length" )
lenStat_qual<-rbind(lenStat_qual,c(gsub("454Reads.MID_","",gsub(".sff","",i)), summary(width(sff)) ) )
count_qual[i,1]<-length(sff)
len_qual[[i]]<-width(sff)
## Base by position plots:
ac <- alphabetByCycle(sread(sff),alphabet=c("A","C","T","G","N"))
ac.reads <- apply(ac,2,sum)
acf <- sweep(ac,MARGIN=2,FUN="/",STATS=apply(ac,2,sum))
tacf<-t(acf); colnames(tacf)<-paste(gsub("454Reads.MID_","",gsub(".sff","",i)),"_",  c("A","C","T","G","N"),sep="")
nucFreq_qual<-cbindX(nucFreq_qual,tacf)
matplot(cbind(t(acf),ac.reads/ac.reads[1]),col=c("green","blue","black","red","darkgrey","purple"),
type="l",lty=1,xlab="Base Position",ylab="Base Frequency",
main="Base by position", xlim=c(0,1000))
par(mfrow=c(1,1))
legend("topright", col=cols, legend=leg, pch=18, cex=.8)
title(paste("sample: ",gsub("454Reads.MID_","",gsub(".sff","",i)),sep=""))
dev.copy(png,filename=paste("Explo_",gsub("454Reads.MID_","",gsub(".sff","",i)),".png",sep=""));
dev.off ();
}
customClip(sff) <- IRanges(start = 1, end = 15)
clipMode(sff) <- "custom"
print("distinct MIDs at 5'")
length(table(counts=as.character(sread(sff))))
print("More frequents")
sort(table(counts=as.character(sread(sff))), decreasing=TRUE)
readSff(paste("samples/",i,sep=""), use.qualities=TRUE, use.names=TRUE,clipMode = c("raw"), verbose=TRUE)
i<-1
readSff(paste("samples/",i,sep=""), use.qualities=TRUE, use.names=TRUE,clipMode = c("raw"), verbose=TRUE)
samples
samples<-grep(".sff",list.files("./samples"),value=TRUE)
sample
samples
lenStat_raw<-vector()
lenStat_qual<-vector()
nucFreq_raw<-matrix(nrow=1000, ncol=1)
nucFreq_qual<-matrix(nrow=1000, ncol=1)
count_raw<-data.frame()
count_qual<-data.frame()
len_raw<-list()
len_qual<-list()
for(i in samples){
sff<-readSff(paste("samples/",i,sep=""), use.qualities=TRUE, use.names=TRUE,clipMode = c("raw"), verbose=TRUE)
##Generate some QA plots:
##Read length histograms (with and without clipping):
# RAW
par(mfrow=c(2,2))
clipMode(sff) <- "raw"
hist(width(sff),breaks=500,col="grey",xlab="Read Length",
xlim= c(50,800), main= "RAW read length")
lenStat_raw<-rbind(lenStat_raw, c(gsub("454Reads.MID_","",gsub(".sff","",i)), summary(width(sff)) ) )
count_raw[i,1]<-length(sff)
len_raw[[i]]<-width(sff)
## Base by position plots:
ac <- alphabetByCycle(sread(sff),alphabet=c("A","C","T","G","N"))
ac.reads <- apply(ac,2,sum)
acf <- sweep(ac,MARGIN=2,FUN="/",STATS=apply(ac,2,sum))
tacf<-t(acf); colnames(tacf)<-paste(gsub("454Reads.MID_","",gsub(".sff","",i)),"_",  c("A","C","T","G","N"),sep="")
nucFreq_raw<-cbindX(nucFreq_raw,tacf)
matplot(cbind(t(acf),ac.reads/ac.reads[1]),col=c("green","blue","black","red","darkgrey","purple"),
type="l",lty=1,xlab="Base Position",ylab="Base Frequency",
main="Base by position", xlim=c(0,1500))
cols <- c("green","blue","black","red","darkgrey","purple")
leg <- c("A","C","T","G","N","%reads")
legend("topright", col=cols, legend=leg, pch=18, cex=.8)
### FILTER QUALITY
clipMode(sff) <- "full"
hist(width(sff),breaks=500,col="grey",xlab="Read Length",
xlim= c(50,800),main="CLIPPED read length" )
lenStat_qual<-rbind(lenStat_qual,c(gsub("454Reads.MID_","",gsub(".sff","",i)), summary(width(sff)) ) )
count_qual[i,1]<-length(sff)
len_qual[[i]]<-width(sff)
## Base by position plots:
ac <- alphabetByCycle(sread(sff),alphabet=c("A","C","T","G","N"))
ac.reads <- apply(ac,2,sum)
acf <- sweep(ac,MARGIN=2,FUN="/",STATS=apply(ac,2,sum))
tacf<-t(acf); colnames(tacf)<-paste(gsub("454Reads.MID_","",gsub(".sff","",i)),"_",  c("A","C","T","G","N"),sep="")
nucFreq_qual<-cbindX(nucFreq_qual,tacf)
matplot(cbind(t(acf),ac.reads/ac.reads[1]),col=c("green","blue","black","red","darkgrey","purple"),
type="l",lty=1,xlab="Base Position",ylab="Base Frequency",
main="Base by position", xlim=c(0,1000))
par(mfrow=c(1,1))
legend("topright", col=cols, legend=leg, pch=18, cex=.8)
title(paste("sample: ",gsub("454Reads.MID_","",gsub(".sff","",i)),sep=""))
dev.copy(png,filename=paste("Explo_",gsub("454Reads.MID_","",gsub(".sff","",i)),".png",sep=""));
dev.off ();
}
customClip(sff) <- IRanges(start = 1, end = 15)
clipMode(sff) <- "custom"
print("distinct MIDs at 5'")
length(table(counts=as.character(sread(sff))))
print("More frequents")
sort(table(counts=as.character(sread(sff))), decreasing=TRUE)
#Statistics about lenght
as.data.frame(lenStat_raw)
write.csv(as.data.frame(lenStat_raw), "Raw_Readlength_stats.csv",row.names = FALSE )
as.data.frame(lenStat_qual)
write.csv(as.data.frame(lenStat_qual), "Clip_Readlength_stats.csv",row.names = FALSE )
#Nucleotide frequency by position
write.csv(nucFreq_raw, "Raw_NuclFreqByPos.csv",row.names = FALSE )
write.csv(nucFreq_qual, "Clip_NuclFreqByPos.csv",row.names = FALSE )
#All length data by sample
count_raw$sample<-gsub("454Reads.MID_","",gsub(".sff","",rownames(count_raw)))
count_qual$sample<-gsub("454Reads.MID_","",gsub(".sff","",rownames(count_qual)))
length_raw<-do.call(cbindX, lapply(len_raw, as.data.frame))
colnames(length_raw)<-gsub("454Reads.MID_","",gsub(".sff","",rownames(count_raw)))
length_qual<-do.call(cbindX, lapply(len_qual, as.data.frame))
colnames(length_qual)<-gsub("454Reads.MID_","",gsub(".sff","",rownames(count_qual)))
rownames(count_raw)<-NULL;rownames(count_qual)<-NULL
write.csv(length_raw, "Raw_AllReadlength.csv",row.names = FALSE )
write.csv(length_qual, "Clip_AllReadlength.csv",row.names = FALSE )
#AMount of sequences by sample
count_raw
write.csv(count_raw, "Raw_CountBySample.csv",row.names = FALSE )
count_qual
write.csv(count_qual, "Clip_CountBySample.csv",row.names = FALSE )
#GRAFICO DE BARRAS CON LA CANTIDAD DE LECTURAS
#plot(cantidad$cantidad, type="b")
library(ggplot2)
p<-ggplot(count_raw, aes(x=sample, weight=V1))+ geom_bar(fill="#2b8cbe")+
theme(axis.text.x = element_text(angle = 45, hjust = 1))
ggplotly(p)
#GRAFICO DE CAJAS
#boxplot(longitud)
p<-ggplot(data = melt(length_raw), aes(x=variable, y=value)) + geom_boxplot(aes(fill=variable))+
theme(axis.text.x = element_text(angle = 45, hjust = 1))+ ggtitle("Raw Reads")
ggplotly(p)
sff@sread
sff@qualityIR
sff@quality
for(i in samples){
sff<-readSff(paste("samples/",i,sep=""), use.qualities=TRUE, use.names=TRUE,clipMode = c("raw"), verbose=TRUE)
customClip(sff) <- IRanges(start = 1, end = 15)
clipMode(sff) <- "custom"
print("distinct MIDs at 5'")
length(table(counts=as.character(sread(sff))))
print("More frequents")
sort(table(counts=as.character(sread(sff))), decreasing=TRUE)
}
length(table(counts=as.character(sread(sff))))
for(i in samples){
sff<-readSff(paste("samples/",i,sep=""), use.qualities=TRUE, use.names=TRUE,clipMode = c("raw"), verbose=TRUE)
customClip(sff) <- IRanges(start = 1, end = 15)
clipMode(sff) <- "custom"
print("distinct MIDs at 5'")
print(length(table(counts=as.character(sread(sff)))))
print("More frequents")
print(sort(table(counts=as.character(sread(sff))), decreasing=TRUE))
}
library(gdata)
library(reshape2)
library(plotly)
library(ggplot2)
library(Biostrings)
samples<-grep(".sff",list.files("./samples"),value=TRUE)
#InstalaciÃ³n rSFFreader
# source("http://bioconductor.org/biocLite.R")
# biocLite("rSFFreader")
require(rSFFreader)
lenStat_raw<-vector()
lenStat_qual<-vector()
nucFreq_raw<-matrix(nrow=1000, ncol=1)
nucFreq_qual<-matrix(nrow=1000, ncol=1)
count_raw<-data.frame()
count_qual<-data.frame()
len_raw<-list()
len_qual<-list()
for(i in samples){
sff<-readSff(paste("samples/",i,sep=""), use.qualities=TRUE, use.names=TRUE,clipMode = c("raw"), verbose=TRUE)
##Generate some QA plots:
##Read length histograms (with and without clipping):
# RAW
par(mfrow=c(2,2))
clipMode(sff) <- "raw"
hist(width(sff),breaks=500,col="grey",xlab="Read Length",
xlim= c(50,800), main= "RAW read length")
lenStat_raw<-rbind(lenStat_raw, c(gsub("454Reads.MID_","",gsub(".sff","",i)), summary(width(sff)) ) )
count_raw[i,1]<-length(sff)
len_raw[[i]]<-width(sff)
## Base by position plots:
ac <- alphabetByCycle(sread(sff),alphabet=c("A","C","T","G","N"))
ac.reads <- apply(ac,2,sum)
acf <- sweep(ac,MARGIN=2,FUN="/",STATS=apply(ac,2,sum))
tacf<-t(acf); colnames(tacf)<-paste(gsub("454Reads.MID_","",gsub(".sff","",i)),"_",  c("A","C","T","G","N"),sep="")
nucFreq_raw<-cbindX(nucFreq_raw,tacf)
matplot(cbind(t(acf),ac.reads/ac.reads[1]),col=c("green","blue","black","red","darkgrey","purple"),
type="l",lty=1,xlab="Base Position",ylab="Base Frequency",
main="Base by position", xlim=c(0,1500))
cols <- c("green","blue","black","red","darkgrey","purple")
leg <- c("A","C","T","G","N","%reads")
legend("topright", col=cols, legend=leg, pch=18, cex=.8)
### FILTER QUALITY
clipMode(sff) <- "full"
hist(width(sff),breaks=500,col="grey",xlab="Read Length",
xlim= c(50,800),main="CLIPPED read length" )
lenStat_qual<-rbind(lenStat_qual,c(gsub("454Reads.MID_","",gsub(".sff","",i)), summary(width(sff)) ) )
count_qual[i,1]<-length(sff)
len_qual[[i]]<-width(sff)
## Base by position plots:
ac <- alphabetByCycle(sread(sff),alphabet=c("A","C","T","G","N"))
ac.reads <- apply(ac,2,sum)
acf <- sweep(ac,MARGIN=2,FUN="/",STATS=apply(ac,2,sum))
tacf<-t(acf); colnames(tacf)<-paste(gsub("454Reads.MID_","",gsub(".sff","",i)),"_",  c("A","C","T","G","N"),sep="")
nucFreq_qual<-cbindX(nucFreq_qual,tacf)
matplot(cbind(t(acf),ac.reads/ac.reads[1]),col=c("green","blue","black","red","darkgrey","purple"),
type="l",lty=1,xlab="Base Position",ylab="Base Frequency",
main="Base by position", xlim=c(0,1000))
par(mfrow=c(1,1))
legend("topright", col=cols, legend=leg, pch=18, cex=.8)
title(paste("sample: ",gsub("454Reads.MID_","",gsub(".sff","",i)),sep=""))
#dev.copy(png,filename=paste("Explo_",gsub("454Reads.MID_","",gsub(".sff","",i)),".png",sep=""));
#dev.off ();
}
#Statistics about lenght
as.data.frame(lenStat_raw)
write.csv(as.data.frame(lenStat_raw), "Raw_Readlength_stats.csv",row.names = FALSE )
as.data.frame(lenStat_qual)
write.csv(as.data.frame(lenStat_qual), "Clip_Readlength_stats.csv",row.names = FALSE )
#Nucleotide frequency by position
write.csv(nucFreq_raw, "Raw_NuclFreqByPos.csv",row.names = FALSE )
write.csv(nucFreq_qual, "Clip_NuclFreqByPos.csv",row.names = FALSE )
#All length data by sample
count_raw$sample<-gsub("454Reads.MID_","",gsub(".sff","",rownames(count_raw)))
count_qual$sample<-gsub("454Reads.MID_","",gsub(".sff","",rownames(count_qual)))
length_raw<-do.call(cbindX, lapply(len_raw, as.data.frame))
colnames(length_raw)<-gsub("454Reads.MID_","",gsub(".sff","",rownames(count_raw)))
length_qual<-do.call(cbindX, lapply(len_qual, as.data.frame))
colnames(length_qual)<-gsub("454Reads.MID_","",gsub(".sff","",rownames(count_qual)))
rownames(count_raw)<-NULL;rownames(count_qual)<-NULL
write.csv(length_raw, "Raw_AllReadlength.csv",row.names = FALSE )
write.csv(length_qual, "Clip_AllReadlength.csv",row.names = FALSE )
#AMount of sequences by sample
count_raw
write.csv(count_raw, "Raw_CountBySample.csv",row.names = FALSE )
count_qual
write.csv(count_qual, "Clip_CountBySample.csv",row.names = FALSE )
#GRAFICO DE BARRAS CON LA CANTIDAD DE LECTURAS
#plot(cantidad$cantidad, type="b")
library(ggplot2)
p<-ggplot(count_raw, aes(x=sample, weight=V1))+ geom_bar(fill="#2b8cbe")+
theme(axis.text.x = element_text(angle = 45, hjust = 1))
ggplotly(p)
#GRAFICO DE CAJAS
#boxplot(longitud)
p<-ggplot(data = melt(length_raw), aes(x=variable, y=value)) + geom_boxplot(aes(fill=variable))+
theme(axis.text.x = element_text(angle = 45, hjust = 1))+ ggtitle("Raw Reads")
ggplotly(p)
#GRAFICO DE CAJAS
#boxplot(longitud)
p<-ggplot(data = melt(length_qual), aes(x=variable, y=value)) + geom_boxplot(aes(fill=variable))+
theme(axis.text.x = element_text(angle = 45, hjust = 1))+ ggtitle("Clipped Reads")
ggplotly(p)
#GRAFICO DE CAJAS
#boxplot(longitud)
p<-ggplot(data = melt(length_raw), aes(x=variable, y=value)) + geom_boxplot(aes(fill=variable))+
theme(axis.text.x = element_text(angle = 45, hjust = 1))+ ggtitle("Raw Reads") + xlab("")
ggplotly(p)
#GRAFICO DE CAJAS
#boxplot(longitud)
p<-ggplot(data = melt(length_raw), aes(x=variable, y=value)) + geom_boxplot(aes(fill=variable))+
theme(axis.text.x = element_text(angle = 45, hjust = 1))+ ggtitle("Raw Reads") + xlab("_")
ggplotly(p)
#GRAFICO DE CAJAS
#boxplot(longitud)
p<-ggplot(data = melt(length_raw), aes(x=variable, y=value)) + geom_boxplot(aes(fill=variable))+
theme(axis.text.x = element_text(angle = 45, hjust = 1))+ ggtitle("Datos Crudos") + xlab("_") + ylab("Longitud")
ggplotly(p)
#GRAFICO DE CAJAS
#boxplot(longitud)
p<-ggplot(data = melt(length_raw), aes(x=variable, y=value)) + geom_boxplot(aes(fill=variable))+
theme(axis.text.x = element_text(angle = 45, hjust = 1) ,legend.position="none")+ ggtitle("Datos Crudos") + xlab("_") + ylab("Longitud")
ggplotly(p)
#GRAFICO DE CAJAS
#boxplot(longitud)
p<-ggplot(data = melt(length_qual), aes(x=variable, y=value)) + geom_boxplot(aes(fill=variable))+
theme(axis.text.x = element_text(angle = 45, hjust = 1) ,legend.position="none")+ ggtitle("Filtro de calidad") + xlab("_") + ylab("Longitud")
#GRAFICO DE CAJAS
#boxplot(longitud)
p<-ggplot(data = melt(length_qual), aes(x=variable, y=value)) + geom_boxplot(aes(fill=variable))+
theme(axis.text.x = element_text(angle = 45, hjust = 1) ,legend.position="none")+ ggtitle("Filtro de calidad") + xlab("_") + ylab("Longitud")
#GRAFICO DE CAJAS
#boxplot(longitud)
p<-ggplot(data = melt(length_qual), aes(x=variable, y=value)) + geom_boxplot(aes(fill=variable))+
theme(axis.text.x = element_text(angle = 45, hjust = 1) ,legend.position="none")+ ggtitle("Filtro de calidad") + xlab("_") + ylab("Longitud")
p
#GRAFICO DE CAJAS
#boxplot(longitud)
p<-ggplot(data = melt(length_qual), aes(x=variable, y=value)) + geom_boxplot(aes(fill=variable))+
theme(axis.text.x = element_text(angle = 45, hjust = 1) ,legend.position="none")+ ggtitle("Filtro de calidad") + xlab("_") + ylab("Longitud")
p
#GRAFICO DE CAJAS
#boxplot(longitud)
p<-ggplot(data = melt(length_raw), aes(x=variable, y=value)) + geom_boxplot(aes(fill=variable))+
theme(axis.text.x = element_text(angle = 45, hjust = 1) ,legend.position="none")+ ggtitle("Datos Crudos") + xlab("_") + ylab("Longitud")
ggplotly(p)
#GRAFICO DE CAJAS
#boxplot(longitud)
p<-ggplot(data = melt(length_qual), aes(x=variable, y=value)) + geom_boxplot(aes(fill=variable))+
theme(axis.text.x = element_text(angle = 45, hjust = 1) ,legend.position="none")+ ggtitle("Filtro de Calidad") + xlab("_") + ylab("Longitud")
p
#GRAFICO DE CAJAS
#boxplot(longitud)
p<-ggplot(data = melt(length_raw), aes(x=variable, y=value)) + geom_boxplot(aes(fill=variable))+
theme(axis.text.x = element_text(angle = 45, hjust = 1) ,legend.position="none",plot.title = element_text(hjust = 0.5))+ ggtitle("Datos Crudos") + xlab("_") + ylab("Longitud")
ggplotly(p)
#GRAFICO DE CAJAS
#boxplot(longitud)
p<-ggplot(data = melt(length_qual), aes(x=variable, y=value)) + geom_boxplot(aes(fill=variable))+
theme(axis.text.x = element_text(angle = 45, hjust = 1) ,legend.position="none",plot.title = element_text(hjust = 0.5))+ ggtitle("Filtro de Calidad") + xlab("_") + ylab("Longitud")
p
ggplotly(p)
for(i in samples){
sff<-readSff(paste("samples/",i,sep=""), use.qualities=TRUE, use.names=TRUE,clipMode = c("raw"), verbose=TRUE)
customClip(sff) <- IRanges(start = 1, end = 15)
clipMode(sff) <- "custom"
print("distinct MIDs at 5'")
print(length(table(counts=as.character(sread(sff)))))
print("More frequents")
print(sort(table(counts=as.character(sread(sff))), decreasing=TRUE))
}
i=samples[1]
sff<-readSff(paste("samples/",i,sep=""), use.qualities=TRUE, use.names=TRUE,clipMode = c("raw"), verbose=TRUE)
readsRaw<-sread(sff)
readsRawWidth<-as.data.frame(cbind(names(readsRaw),width(readsRaw)))
head(readsRawWidth)
readRawS<-readsRaw[1]
names(readRawS)<-paste(names(readRawS),"_raw",sep="")
readRawQ<-quality(sff)[1]
writeXStringSet(readRawS, file="readRawS.fasta", format="fasta")
clipMode(sff) <- "raw"
#After quallity clip( similar to roche clip mode)
clipMode(sff) <- "full"
readsFull<-sread(sff)
readsFullWidth<-as.data.frame(cbind(names(readsFull),width(readsFull)))
head(readsFullWidth)
names(readFullS)<-paste(names(readFullS),"_full",sep="")
i=samples[1]
sff<-readSff(paste("samples/",i,sep=""), use.qualities=TRUE, use.names=TRUE,clipMode = c("raw"), verbose=TRUE)
readsRaw<-sread(sff)
readsRawWidth<-as.data.frame(cbind(names(readsRaw),width(readsRaw)))
head(readsRawWidth)
readRawS<-readsRaw[1]
names(readRawS)<-paste(names(readRawS),"_raw",sep="")
readRawQ<-quality(sff)[1]
writeXStringSet(readRawS, file="readRawS.fasta", format="fasta")
clipMode(sff) <- "raw"
#After quallity clip( similar to roche clip mode)
clipMode(sff) <- "full"
readsFull<-sread(sff)
readsFullWidth<-as.data.frame(cbind(names(readsFull),width(readsFull)))
head(readsFullWidth)
names(readFullS)<-paste(names(readFull),"_full",sep="")
i=samples[1]
sff<-readSff(paste("samples/",i,sep=""), use.qualities=TRUE, use.names=TRUE,clipMode = c("raw"), verbose=TRUE)
readsRaw<-sread(sff)
readsRawWidth<-as.data.frame(cbind(names(readsRaw),width(readsRaw)))
head(readsRawWidth)
readRawS<-readsRaw[1]
names(readRawS)<-paste(names(readRawS),"_raw",sep="")
readRawQ<-quality(sff)[1]
writeXStringSet(readRawS, file="readRawS.fasta", format="fasta")
clipMode(sff) <- "raw"
#After quallity clip( similar to roche clip mode)
clipMode(sff) <- "full"
readsFull<-sread(sff)
readsFullWidth<-as.data.frame(cbind(names(readsFull),width(readsFull)))
head(readsFullWidth)
readRawS<-readsFull[1]
names(readFullS)<-paste(names(readFullS),"_full",sep="")
i=samples[1]
sff<-readSff(paste("samples/",i,sep=""), use.qualities=TRUE, use.names=TRUE,clipMode = c("raw"), verbose=TRUE)
readsRaw<-sread(sff)
readsRawWidth<-as.data.frame(cbind(names(readsRaw),width(readsRaw)))
head(readsRawWidth)
readRawS<-readsRaw[1]
names(readRawS)<-paste(names(readRawS),"_raw",sep="")
readRawQ<-quality(sff)[1]
writeXStringSet(readRawS, file="readRawS.fasta", format="fasta")
clipMode(sff) <- "raw"
#After quallity clip( similar to roche clip mode)
clipMode(sff) <- "full"
readsFull<-sread(sff)
readsFullWidth<-as.data.frame(cbind(names(readsFull),width(readsFull)))
head(readsFullWidth)
readFullS<-readsFull[1]
names(readFullS)<-paste(names(readFullS),"_full",sep="")
readFullQ<-quality(sff)[1]
writeXStringSet(readFullS, file="readFullS.fasta", format="fasta")
quantile(as(readFullQ, "numeric"))
checktab<-as.data.frame(
cbindX(
as.matrix(as.matrix(readRawS)[15:length(as.matrix(readRawS))] ) ,
as.matrix( (as.numeric(readRawQ[[1]])-33)[14:length(as.numeric(readRawQ[[1]])-33)]),
t(as.matrix(readFullS)) ,
as.matrix( (as.numeric(readFullQ[[1]])-33)[14:length(as.numeric(readFullQ[[1]])-33)])  ))
write.csv(checktab, "checktab.csv", row.names = FALSE)
readsRaw<-sread(sff)
readsRawQ<-   as(quality(sff), "PhredQuality")
library(ShortRead); setSR <- ShortReadQ(sread=readsRaw, quality=FastqQuality(BStringSet(readsRawQ)), BStringSet(readsRawQ))
myMA <- as(quality(setSR), "matrix")
file_name<-gsub("454Reads.MID_","",gsub(".sff","",i))
library(Biostrings)
pro1_read = readDNAStringSet(paste("samples/processed_files/",file_name,"/",file_name,".fna", sep=""), format="fasta")
pro1_read_width<-as.data.frame(cbind(names(pro1_read),width(pro1_read)))
head(pro1_read_width)
sffContainer <- readSFF(paste("samples/",i,sep=""))
seqtab%>%
group_by(basecall)%>%
plot_ly( y = ~flowgrams, color = ~basecall, type = "box")
seqtab%>%
group_by(basecall)%>%
plot_ly( y = ~flowgrams, color = ~basecall, type = "box")
sffContainer <- readSFF(paste("samples/",i,sep=""))
?readSFF
library(R453Plus1Toolbox)
library(R453Plus1Toolbox)
sffContainer <- readSFF(paste("samples/",i,sep=""))
showClass("SFFContainer")
reads(sffContainer)
#qualityReportSFF(sffContainer, "report.pdf")
positionQualityBoxplot(sffContainer)
#dinucleotideOddsRatio
#sff2fastq()
#GRAFICO DE BARRAS CON LA CANTIDAD DE LECTURAS
#plot(cantidad$cantidad, type="b")
library(ggplot2)
p<-ggplot(count_raw, aes(x=sample, weight=V1))+ geom_bar(fill="#2b8cbe")+
theme(axis.text.x = element_text(angle = 45, hjust = 1)) + xlab("_")
ggplotly(p)
#GRAFICO DE BARRAS CON LA CANTIDAD DE LECTURAS
#plot(cantidad$cantidad, type="b")
library(ggplot2)
p<-ggplot(count_raw, aes(x=sample, weight=V1))+ geom_bar(fill="#2b8cbe")+
theme(axis.text.x = element_text(angle = 45, hjust = 1)) + xlab("_") + ylab("Cantidad de Secuencias")
ggplotly(p)
#GRAFICO DE BARRAS CON LA CANTIDAD DE LECTURAS
#plot(cantidad$cantidad, type="b")
library(ggplot2)
p<-ggplot(count_qual, aes(x=sample, weight=V1))+ geom_bar(fill="#2b8cbe")+
theme(axis.text.x = element_text(angle = 45, hjust = 1)) + xlab("_") + ylab("Cantidad de Secuencias")
ggplotly(p)
#GRAFICO DE CAJAS
#boxplot(longitud)
p<-ggplot(data = melt(length_raw), aes(x=variable, y=value)) + geom_boxplot(aes(fill=variable))+
theme(axis.text.x = element_text(angle = 45, hjust = 1) ,legend.position="none",plot.title = element_text(hjust = 0.5))+ ggtitle("Datos Crudos") + xlab("_") + ylab("Longitud (nucleotidos)")
ggplotly(p)
#GRAFICO DE CAJAS
#boxplot(longitud)
p<-ggplot(data = melt(length_raw), aes(x=variable, y=value)) + geom_boxplot(aes(fill=variable))+
theme(axis.text.x = element_text(angle = 45, hjust = 1) ,legend.position="none",plot.title = element_text(hjust = 0.5))+ ggtitle("Datos Crudos") + xlab("_") + ylab("Longitud (nucleÃ³tidos)")
ggplotly(p)
#GRAFICO DE CAJAS
#boxplot(longitud)
p<-ggplot(data = melt(length_raw), aes(x=variable, y=value)) + geom_boxplot(aes(fill=variable))+
theme(axis.text.x = element_text(angle = 45, hjust = 1) ,legend.position="none",plot.title = element_text(hjust = 0.5))+ ggtitle("Datos Crudos") + xlab("_") + ylab("Longitud (nucleÃ³tidos)")
ggplotly(p)
library(R453Plus1Toolbox)
par(mfrow=c(3,3))
for ( i in  samples)
{
sffContainer <- readSFF(paste("samples/",i,sep=""))
showClass("SFFContainer")
reads(sffContainer)
#qualityReportSFF(sffContainer, "report.pdf")
positionQualityBoxplot(sffContainer)
#dinucleotideOddsRatio
#sff2fastq()
}
par(mfrow=c(1,1))
par(mfrow=c(3,3))
for ( i in  samples)
{
sffContainer <- readSFF(paste("samples/",i,sep=""))
showClass("SFFContainer")
reads(sffContainer)
#qualityReportSFF(sffContainer, "report.pdf")
positionQualityBoxplot(sffContainer)
#dinucleotideOddsRatio
#sff2fastq()
}
par(mfrow=c(1,1))
knitr::opts_chunk$set(echo = FALSE)
library(plotly)
df <- data.frame(x =  1:10, y = (1:10)^2)
p <- ggplot(df, aes(x = x, y = y)) + geom_line() + labs(x = "X", y = "Y", title = "X and Y")
ggplotly(p)
plot_ly(df, x = x, y = y)
df <- data.frame(x =  1:10, y = (1:10)^2)
plot_ly(df, x = x, y = y)
df <- data.frame(x =  1:10, y = (1:10)^2)
plot_ly(df, x = ~x, y = ~y)
